---
# author: fat
- block:
    - name: install | Check if tomcat local file is already configured.
      stat: path={{ tomcat_file_path }}
      delegate_to: localhost
      register: tomcat_file_result

    - name: install | Create software directory.
      file: path={{ software_files_path }} state=directory
      delegate_to: localhost
      when: not tomcat_file_result.stat.exists
      
    - name: install | Download tomcat file.
      get_url: url={{ tomcat_file_url }} dest={{ software_files_path }}
      delegate_to: localhost
      when: not tomcat_file_result.stat.exists
  run_once: true

- name: install | Confirm the existence of the installation directory.
  file: path={{ software_install_path }} state=directory

- name: install | Create tomcat group.
  group: name={{ tomcat_user }}

- name: install | Create tomcat user.
  user: name={{ tomcat_user }} group={{ tomcat_user }} shell=/sbin/nologin

- name: install | Ensure gcc packages are installed.
  yum:
    name: "{{ gcc_install_redhat }}"
    state: installed
  when: ansible_os_family == 'RedHat'
  
- name: install | Ensure gcc packages are installed.
  apt:
    name: "{{ gcc_install_debian }}"
  when: ansible_os_family == 'Debian'
  
- name: install | Copy tomcat file to agent.
  unarchive:
    src: "{{ tomcat_file_path }}"
    dest: /tmp
    creates: "/tmp/apache-tomcat-{{ tomcat_version }}/bin/startup.sh"

- name: install | Move tomcat dir.
  shell: "mv /tmp/apache-tomcat-{{ tomcat_version }} {{ tomcat_work_path }} removes=/tmp/apache-tomcat-{{ tomcat_version }} creates={{ tomcat_work_path }}"

- name: install | Check if jsvc is already configured.
  stat: path="{{ tomcat_work_path }}/bin/jsvc"
  register: tomcat_jsvc_result

- block:

  # - name: install | Find the src path
    # shell: tar -tf {{ commons_daemon_native_packages }} | head -1|awk -F \/ '{ print $1}' 
    # args:
       # chdir: "{{ tomcat_work_path }}/bin"
    # register: tomcat_native_src
    
  # - name: install | set fact for tomcat_daemon_native_path
    # set_fact:  tomcat_daemon_native_path={{ tomcat_work_path }}/bin/{{ tomcat_native_src.stdout }}
       
  - name: install | Unarchive commons daemon.
    unarchive:
      src: "{{ tomcat_work_path }}/bin/{{ commons_daemon_native_packages }}"
      dest: "{{ tomcat_work_path }}/bin/"
      list_files: true
      remote_src: true
    register: tar_result

#  - debug: msg="{{ tar_result }}"
  - name: install | set fact for tomcat_daemon_native_path
    set_fact:  tomcat_daemon_native_path={{ tomcat_work_path }}/bin/{{ tar_result.files[0].split('/')[0] }}  

  - name: install | Build commons daemon.
    shell: "./configure && make chdir={{ tomcat_daemon_native_path }}/unix"
    environment:
      - JAVA_HOME: "{{ java_home }}"

  - name: install | Copy jsvc To bin directory.
    copy: "src={{ tomcat_daemon_native_path }}/unix/jsvc dest={{ tomcat_work_path }}/bin/ mode=0755 remote_src=True"
  when: not tomcat_jsvc_result.stat.exists

- name: install | The directory belongs to tomcat.
  file: "path={{ tomcat_work_path }} owner={{ tomcat_user }} group={{ tomcat_user }} recurse=yes state=directory"
